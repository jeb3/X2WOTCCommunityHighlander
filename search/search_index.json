{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"X2WOTCCommunityHighlander Documentation Current status of the Documentation The documentation is freshly introduced. It will take us a while to document all old features, but it is expected that new features all come with their documentation page. How to read The nav bar has a list of features. Click on a feature to view that feature's documentation. Every feature has: A GitHub tracking issue for discussion A documented way to use it, for example with an event tuple Code references that link to HL source code where the documentation is Documentation for the documentation tool We place our documentation inside of the source code next to where the main change for the given feature is. make_docs.py extracts this documentation and renders MarkDown pages, which MkDocs in turn renders to a web page. You can run the documentation tool locally by installing Python (recommended version 3.7) and running python .\\\\.scripts\\\\make_docs.py .\\\\X2WOTCCommunityHighlander\\\\Src\\\\ .\\\\X2WOTCCommunityHighlander\\\\Config\\\\ --outdir .\\\\target\\\\ --docsdir .\\\\docs_src\\\\ or the makeDocs task in VS Code. This creates Markdown files for the documentation; rendering HTML documentation requires MkDocs : pip install mkdocs cd .\\target\\ mkdocs serve Whenever the master branch is committed to, the documentation is built and deployed here. Additionally, upon opening or updating a Pull Request, the documentation is built and uploaded as a GitHub artifact. This can be used to easily check the resulting documentation for a Pull Request. Inline Documentation The core concept of the documentation script is \"features\". Documentation always relates to a given feature, and usually the feature name is the name of the function or event that is added. Every feature needs exactly one definition , and may have additional documentation scattered throughout other source files. Syntax Every block of comments starting with triple comment characters ( /// for UnrealScript files and ;;; for Ini files) and an optional whitespace character (space or tab) will be considered for documentation. Additionally, the first line must begin with HL-Docs: . All directly following lines that start with the same triple comment will be included until the first line that does not have that triple comment. Standard MarkDown syntax is expected and supported. You may include source code fragments directly from the game code by placing a single HL-Include: in an otherwise empty triple comment line; all following lines until the next triple comment line will be included as source code in the documentation. Feature definitions A feature definition has the following syntax: HL-Docs: feature:<string>; issue:<int>; tags:<string>,<string>... Feature references If you have defined a feature somewhere but want to reference other parts of the source code, or want to spread the documentation for a feature across different files, you may place a reference: HL-Docs: ref:<string> All text from the reference block will be appended to the main documentation as well. Complete example (Taken from ArmorEquipRollDLCPartChance ) XComGameState_Unit.uc : /// HL-Docs: feature:ArmorEquipRollDLCPartChance; issue:155; tags:customization,compatibility /// When a unit equips new armor, the game rolls from all customization options, even the ones where /// the slider for the `DLCName` is set to `0`. The HL change fixes this, but if your custom armor only /// has customization options with a `DLCName` set, the game may discard that `DLCName` (default: in 85% of cases) /// which results in soldiers without torsos. If you want to keep having `DLCName`-only armor /// (for example to display mod icons in `UICustomize`), you must disable that behavior /// by creating the following lines in `XComGame.ini`: /// /// ```ini /// [XComGame.CHHelpers] /// +CosmeticDLCNamesUnaffectedByRoll=MyDLCName /// ``` XComGame.ini : ;;; HL-Docs: ref:ArmorEquipRollDLCPartChance Tags You may tag your documentation with a number of built-in and custom tags. strategy and tactical are built-in tags used to categorize features in the navigation bar. If a feature has one tag and not the other, it'll land in that category. Otherwise, it'll land in the misc category. Custom tags can be used, but need a custom page that serves as an index page for that tag; for example the compatibility tag has a page docs_src/compatibility.md that describes what the tag is supposed to mean and (automatically generated) links to all features with that tag. Bugfixes The Bugfixes feature is owned by the documentation script and as such has no definition in the game code. It is used for generating a page listing all bugfixes that can be explained by a single line. It uses a slightly modified reference syntax: HL-Docs: ref:Bugfixes; issue:<int> <string> for example: /// HL-Docs: ref:Bugfixes; issue:70 /// `CharacterPoolManager:CreateCharacter` now honors ForceCountry","title":"X2WOTCCommunityHighlander Documentation"},{"location":"#x2wotccommunityhighlander-documentation","text":"","title":"X2WOTCCommunityHighlander Documentation"},{"location":"#current-status-of-the-documentation","text":"The documentation is freshly introduced. It will take us a while to document all old features, but it is expected that new features all come with their documentation page.","title":"Current status of the Documentation"},{"location":"#how-to-read","text":"The nav bar has a list of features. Click on a feature to view that feature's documentation. Every feature has: A GitHub tracking issue for discussion A documented way to use it, for example with an event tuple Code references that link to HL source code where the documentation is","title":"How to read"},{"location":"#documentation-for-the-documentation-tool","text":"We place our documentation inside of the source code next to where the main change for the given feature is. make_docs.py extracts this documentation and renders MarkDown pages, which MkDocs in turn renders to a web page. You can run the documentation tool locally by installing Python (recommended version 3.7) and running python .\\\\.scripts\\\\make_docs.py .\\\\X2WOTCCommunityHighlander\\\\Src\\\\ .\\\\X2WOTCCommunityHighlander\\\\Config\\\\ --outdir .\\\\target\\\\ --docsdir .\\\\docs_src\\\\ or the makeDocs task in VS Code. This creates Markdown files for the documentation; rendering HTML documentation requires MkDocs : pip install mkdocs cd .\\target\\ mkdocs serve Whenever the master branch is committed to, the documentation is built and deployed here. Additionally, upon opening or updating a Pull Request, the documentation is built and uploaded as a GitHub artifact. This can be used to easily check the resulting documentation for a Pull Request.","title":"Documentation for the documentation tool"},{"location":"#inline-documentation","text":"The core concept of the documentation script is \"features\". Documentation always relates to a given feature, and usually the feature name is the name of the function or event that is added. Every feature needs exactly one definition , and may have additional documentation scattered throughout other source files.","title":"Inline Documentation"},{"location":"#syntax","text":"Every block of comments starting with triple comment characters ( /// for UnrealScript files and ;;; for Ini files) and an optional whitespace character (space or tab) will be considered for documentation. Additionally, the first line must begin with HL-Docs: . All directly following lines that start with the same triple comment will be included until the first line that does not have that triple comment. Standard MarkDown syntax is expected and supported. You may include source code fragments directly from the game code by placing a single HL-Include: in an otherwise empty triple comment line; all following lines until the next triple comment line will be included as source code in the documentation.","title":"Syntax"},{"location":"#feature-definitions","text":"A feature definition has the following syntax: HL-Docs: feature:<string>; issue:<int>; tags:<string>,<string>...","title":"Feature definitions"},{"location":"#feature-references","text":"If you have defined a feature somewhere but want to reference other parts of the source code, or want to spread the documentation for a feature across different files, you may place a reference: HL-Docs: ref:<string> All text from the reference block will be appended to the main documentation as well.","title":"Feature references"},{"location":"#complete-example","text":"(Taken from ArmorEquipRollDLCPartChance ) XComGameState_Unit.uc : /// HL-Docs: feature:ArmorEquipRollDLCPartChance; issue:155; tags:customization,compatibility /// When a unit equips new armor, the game rolls from all customization options, even the ones where /// the slider for the `DLCName` is set to `0`. The HL change fixes this, but if your custom armor only /// has customization options with a `DLCName` set, the game may discard that `DLCName` (default: in 85% of cases) /// which results in soldiers without torsos. If you want to keep having `DLCName`-only armor /// (for example to display mod icons in `UICustomize`), you must disable that behavior /// by creating the following lines in `XComGame.ini`: /// /// ```ini /// [XComGame.CHHelpers] /// +CosmeticDLCNamesUnaffectedByRoll=MyDLCName /// ``` XComGame.ini : ;;; HL-Docs: ref:ArmorEquipRollDLCPartChance","title":"Complete example"},{"location":"#tags","text":"You may tag your documentation with a number of built-in and custom tags. strategy and tactical are built-in tags used to categorize features in the navigation bar. If a feature has one tag and not the other, it'll land in that category. Otherwise, it'll land in the misc category. Custom tags can be used, but need a custom page that serves as an index page for that tag; for example the compatibility tag has a page docs_src/compatibility.md that describes what the tag is supposed to mean and (automatically generated) links to all features with that tag.","title":"Tags"},{"location":"#bugfixes","text":"The Bugfixes feature is owned by the documentation script and as such has no definition in the game code. It is used for generating a page listing all bugfixes that can be explained by a single line. It uses a slightly modified reference syntax: HL-Docs: ref:Bugfixes; issue:<int> <string> for example: /// HL-Docs: ref:Bugfixes; issue:70 /// `CharacterPoolManager:CreateCharacter` now honors ForceCountry","title":"Bugfixes"},{"location":"Bugfixes/","text":"Bugfixes This page accomodates all bug fixes that do not deserve their own documentation page, as they are simple enough to be entirely explained by a single line. #20 - X2Ability.uc:1443-1444 : Reaper's Banish now properly visualizes subsequent shots. #33 - XGUnitNativeBase.uc:543-544 : Gremlins owned by AI units now correctly use fast walk animations even if their owner is in Red Alert #36 - X2TacticalGameRuleset.uc:4648-4649 : Do not clear Reinforcements' \"Summoning Sickness\" when interrupted by Skirmisher, denying them an erronous bonus turn. #51 - XComGameState_AdventChosen.uc:264-265 : Prevent Assassin from gaining perks incompatible with forced \"Shadowstep\" in Lost and Abandoned #55 - CHItemSlot.uc:346-347 : Check a soldier's NeedsSecondaryWeapon everywhere instead of hardcoding based on Rookie rank #70 - CharacterPoolManager.uc:447-448 : CharacterPoolManager:CreateCharacter now honors ForceCountry #95 - XComGameState_Unit.uc:12817-12818 : ResetRankToRookie now correctly applies Beta Strike HP bonuses #160 - UIOptionsPCScreen.uc:3145-3146 : UIOptionsPCScreen now shows all part pack sliders, adding a scroll bar if needed #215 - XGUnit.uc:1450-1451 : Units are now allowed to have personality speech (affected by personality) even below \"Veteran\" rank #269 - XComIdleAnimationStateMachine.uc:1090-1091 : Fix some edge cases in XComIdleAnimationStateMachine regarding idle animations, targeting, and step-outs #273 - X2Ability.uc:1497-1498 : Fix an issue causing Rapid Fire/Chain Shot/Banish/... entering cover early #303 - UITooltipInfoList.uc:98-99 : UITooltipInfoList no longer displays stale data like weapon upgrades from other units #318 - X2Camera_Cinescript.uc:528-529 : Fix Cinescript CutAfterPrevious not working in combination with MatineeReplacements , breaking Spark BIT hack camera #326 - X2Action_ApplyWeaponDamageToUnit.uc:187-188 : Allow damage flyovers from weapon-less Psi abilities to use the Psi damage popup #376 - XGUnit.uc:3608-3609 : Gremlins (and other Cosmetic Units) are now correctly tinted and patterned #426 - X2AbilityToHitCalc_StandardAim.uc:196-197 : Fix X2AbilityToHitCalc_StandardAim discarding unfavorable (for XCOM) changes to hit results from effects #493 - X2AbilityToHitCalc_StandardAim.uc:700-701 : Allow REACTION_DASHING_FINALMOD to reduce reaction fire hit chance against dashing targets #503 - XGAIBehavior.uc:9658-9659 : \"Flying\" pod leaders now patrol despite non-flat tiles on their paths #508 - XComGameState_AIGroup.uc:422-423 : Patrol logic now ensures units do not attempt to patrol outside of the map which would cause them to stop patrolling #520 - X2MeleePathingPawn.uc:174-175 : Controller input now allows choosing melee attack destination tile despite floor differences #531 - X2Ability_ChosenAssassin.uc:565-566 : Assassin gains a temporary instead of permanently stacking mobility boost from performing a melee attack #551 - X2Action_SwapTeams.uc:48-49 : Rescue rings no longer disappear on other rescuable units after a neutral unit swaps to team XCom #557 - XComGameState_Unit.uc:2325-2326 : Soldiers that have been carried out of a mission are no longer unable to be carried out of a later mission #608 - XComGameState_Unit.uc:4070-4071 : MergeAmmoAsNeeded now also works for units spawned from the Avenger #613 - UIX2PanelHeader.uc:53-54 : SetText now sends text to flash instead of requiring calling SetHeaderWidth #637 - XComGameState_Unit.uc:13710-13711 : Will recovery project and soldier mental state are now consistent with each other, fixing Shaken/Tired soldiers occasionally recovering instantly #638 - UIScanButton.uc:278-279 : UIScanButton can now work properly when it's a grandchild of UIStrategyMapItem, not only when direct child #644 - X2Ability_DefaultAbilitySet.uc:426-427 : Allow patrolling units to occupy the same tile instead of teleporting to (0,0,0) when out of space, potentially revealing XCOM #648 - UIHackingScreen.uc:410-411 : Cancelling a hack in progress using Esc no longer bypasses Haywire's cooldown","title":"Bugfixes"},{"location":"compatibility/","text":"Compatibility Because the Highlander is a core mod that many different mods on the workshop depend on, it strives to not make any observable changes to the base game (save for bug fixes and features that mods explicitly make use of). However, everything can potentially be a breaking change because the existing behavior rarely has any documentation in the game. Additionally, ModClassOverrides in mods occasionally override functions that were changed in the Highlander, essentially reverting the change and breaking a Highlander feature. As a result, sometimes modders need to pay special attention to Highlander features. This page is a list of pages tagged compatibility , indicating a potential incompatibility. Every page listed here has an section Compatibility that describes the issue and how modders can fix it. #155 - ArmorEquipRollDLCPartChance #257 - OverrideUnitFocusUI","title":"Compatibility"},{"location":"customization/","text":"Customization This is a list of all pages tagged \"customization\". #155 - ArmorEquipRollDLCPartChance","title":"Customization"},{"location":"events/","text":"Events Many of the Highlander's features utilize Event Hooks . Mods can subscribe to any event by name, and then Read some of the data passed with the event Perform actions in response to the event Send data back to the sender of the event Especially the last option is something many Highlander hooks expect mods to do. This is done with the XComLWTuple class. It can contain arbitrary tagged data, can be read and written to by mods. Consider it a polymorphic tuple that is compatible with any event trigger/listener signature. The following is a list of all pages tagged \"Events\" due to their relevance to or use of the event system. #754 - XComLWTuple","title":"Events"},{"location":"loadoutslots/","text":"Loadout Slots The Highlander has a number of features to add new loadout slots, change existing loadout slot availability, or modify which items can be equipped under which conditions. This is a list of pages tagged \"Loadoutslots\". #118 - CustomInventorySlots","title":"Loadout Slots"},{"location":"pawns/","text":"Pawns In the context of XCOM 2, Pawns are the Unreal-3D representation of units and weapons. These Pawns define the 3D meshes and materials, their attachments, animations, and state. A pawn always has an archetype that is usually specified in the template. When a unit or weapon is spawned, a clone of the archetype is created and placed in the 3D world. This leaves mods that want to make modifications with two options: Modify the archetype: The archetype can be dynamically loaded ( RequestGameArchetype / DynamicLoadObject ) by mods for modification. This can, especially with many mods, take a fair while as some mods would have to load every archetype they want to modify. It also interacts badly with the garbage collector, as unused archetypes will be removed from memory and have their changes reverted. Additionally, these changes are static; all future instances will be affected the same and different instances cannot receive individual changes. Modify the instance: The mod finds a way to modify the instance that was just created as a clone. This allows mods to change things that are considered properties of the archetype on a per-instance basis. However, it is difficult to reliably receive a notification when an archetype is cloned and a new instance is created. The Highlander can help with this by triggering events and calling DLC hooks whenever mods may need to change instance properties. This page contains a list of features that can help with pawn modification on a per-instance basis.","title":"Pawns"},{"location":"misc/ArmorEquipRollDLCPartChance/","text":"ArmorEquipRollDLCPartChance Tracking Issue: #155 Tags: customization , compatibility When a unit equips new armor, the game rolls from all customization options, even the ones where the slider for the DLCName is set to 0 . The HL change fixes this. Compatibility If your custom armor only has customization options with a DLCName set, the game may discard that DLCName (default: in 85% of cases) which results in soldiers without torsos. If you want to keep having DLCName -only armor (for example to display mod icons in UICustomize ), you must disable that behavior by creating the following lines in XComGame.ini : [XComGame.CHHelpers] +CosmeticDLCNamesUnaffectedByRoll=MyDLCName Source code references XComGameState_Unit.uc:7459-7473 XComGame.ini:32-32","title":"ArmorEquipRollDLCPartChance"},{"location":"misc/ArmorEquipRollDLCPartChance/#compatibility","text":"If your custom armor only has customization options with a DLCName set, the game may discard that DLCName (default: in 85% of cases) which results in soldiers without torsos. If you want to keep having DLCName -only armor (for example to display mod icons in UICustomize ), you must disable that behavior by creating the following lines in XComGame.ini : [XComGame.CHHelpers] +CosmeticDLCNamesUnaffectedByRoll=MyDLCName","title":"Compatibility"},{"location":"misc/ArmorEquipRollDLCPartChance/#source-code-references","text":"XComGameState_Unit.uc:7459-7473 XComGame.ini:32-32","title":"Source code references"},{"location":"misc/ClassIsNative/","text":"ClassIsNative Tracking Issue: #767 To check whether a given class is native, use the static function CH_ClassIsNative . Example usage: CH_ClassIsNative(class'X2AbilityTarget_Single'); // True CH_ClassIsNative(UnitState.GetVisualizer().Class); // False because XGUnit is always non-native Source code references Object.uc:2405-2412","title":"ClassIsNative"},{"location":"misc/ClassIsNative/#source-code-references","text":"Object.uc:2405-2412","title":"Source code references"},{"location":"misc/ComponentVersions/","text":"ComponentVersions Tracking Issue: #765 Both the Highlander and mods using it may be interested in whether replacements for base game packages (\"components\") are installed, and if, which version. This can be used to Behave differently depending on whether a HL feature is available Provide more targeted error messages when a certain HL version is required For example, if you are interested in whether version 1.19.0 of the Highlander is correctly enabled, you can use the following: if (class'CHXComGameVersionTemplate' != none && (class'CHXComGameVersionTemplate'.default.MajorVersion > 1 || (class'CHXComGameVersionTemplate'.default.MajorVersion == 1 && class'CHXComGameVersionTemplate'.default.MinorVersion >= 19) ) ) { // Installed, do thing A } else { // Not installed or wrong version, do thing B } For other classes, see Source code references below. Note that you can employ feature-based detection if the feature can be distinguished by the presence of a certain function or property. For example, OverrideUnitFocusUI can be detected with the following trick: if (Function'XComGame.CHHelpers.GetFocusTuple' != none) { // Feature present } else { // Feature absent } Source code references CHXComGameVersionTemplate.uc:12-55 CHX2WOTCCHVersion.uc:1-1 CHEngineVersion.uc:1-1 CHCoreVersion.uc:1-1 CHDLC2Version.uc:1-1","title":"ComponentVersions"},{"location":"misc/ComponentVersions/#source-code-references","text":"CHXComGameVersionTemplate.uc:12-55 CHX2WOTCCHVersion.uc:1-1 CHEngineVersion.uc:1-1 CHCoreVersion.uc:1-1 CHDLC2Version.uc:1-1","title":"Source code references"},{"location":"misc/CustomInventorySlots/","text":"CustomInventorySlots Tracking Issue: #118 Tags: loadoutslots This feature defines additional inventory slots in the Highlander for mods to use. Configuration is done via CHItemSlot . More docs to follow. enum EInventorySlot { eInvSlot_Unknown, eInvSlot_Armor, eInvSlot_PrimaryWeapon, eInvSlot_SecondaryWeapon, eInvSlot_HeavyWeapon, eInvSlot_Utility, eInvSlot_Mission, eInvSlot_Backpack, eInvSlot_Loot, eInvSlot_GrenadePocket, eInvSlot_CombatSim, eInvSlot_AmmoPocket, eInvSlot_TertiaryWeapon, eInvSlot_QuaternaryWeapon, eInvSlot_QuinaryWeapon, eInvSlot_SenaryWeapon, eInvSlot_SeptenaryWeapon, // Add a marker slot, and buffer in case Firaxis adds more in the future // ALL MARKER SLOTS SHOULD NOT BE USED IN CODE OTHER THAN XCOMGAME // CHItemSlotTemplate has static helper functions for this purpose! // Since enums are compile-time constants, mods may have old values // that don't apply anymore for markers. eInvSlot_END_VANILLA_SLOTS, eInvSlot_Buffer018, eInvSlot_Buffer019, eInvSlot_Buffer020, eInvSlot_Buffer021, eInvSlot_Buffer022, eInvSlot_Buffer023, eInvSlot_Buffer024, eInvSlot_Buffer025, eInvSlot_Buffer026, eInvSlot_Buffer027, eInvSlot_Buffer028, eInvSlot_Buffer029, eInvSlot_Buffer030, eInvSlot_Buffer031, // again, don't use in mod code eInvSlot_BEGIN_TEMPLATED_SLOTS, // Custom slots begin here. We have space for ~220 slots, should be enough! // These slots can be used in Mod code and config values eInvSlot_Vest, eInvSlot_AugmentationHead, eInvSlot_AugmentationTorso, eInvSlot_AugmentationArms, eInvSlot_AugmentationLegs, eInvSlot_CombatDrugs, eInvSlot_Decorations, eInvSlot_PsiAmp, eInvSlot_Plating, eInvSlot_SparkLauncher, eInvSlot_ExtraSecondary, eInvSlot_PrimaryPayload, eInvSlot_SecondaryPayload, eInvSlot_ExtraRocket1, eInvSlot_ExtraRocket2, eInvSlot_ExtraRocket3, eInvSlot_ExtraRocket4, eInvSlot_Pistol, eInvSlot_Wings, eInvSlot_ExtraBackpack, // Marker slot, don't use eInvSlot_END_TEMPLATED_SLOTS, }; If you need additional enum entries, request them in the tracking issue. Source code references X2TacticalGameRulesetDataStructures.uc:38-111 CHItemSlot.uc:13-13","title":"CustomInventorySlots"},{"location":"misc/CustomInventorySlots/#source-code-references","text":"X2TacticalGameRulesetDataStructures.uc:38-111 CHItemSlot.uc:13-13","title":"Source code references"},{"location":"misc/XComLWTuple/","text":"XComLWTuple Tracking Issue: #754 Tags: events XComLWTuple is based on the original LWTuple that many other mods package themselves, but it cannot be used interchangeably with that class. That means you have to use XComLWTuple for community highlander hooks that rely on it. LWTuple can be used to pass information between two mods without those mods needing to share any additional class types. Typically this information is passed using the XCOM2 event system: an event trigger passes an LWTuple as the EventData, and the listeners can retrieve this LWTuple. Data can be passed in both directions through this system, and the only type they both need to know about is LWTuple. LWTuples contain an id (a name) and an array of LWTValue values. The name is arbitrary and can be used to allow the sender and receiver to validate they are working with the tuple they are expecting. The data array holds the actual data to pass. LWTValue values are a union-like structure, similar to the ASValue struct used by the Scaleform system. A value can hold a bool, int, float, string, name, or object. Values are used by setting the field corresponding to the type you wish to store (e.g. i for int) and setting the kind field to the corresponding enum value (LWTVInt in this case). Readers should read only the field corresponding to the kind set in the value. To use a tuple with the event system, the code firing the event should \"new\" a LWTuple, set its ID field to an appropriate name, optionally fill in any information needed by the event listeners, and pass it as the EventData for the event. Listeners should cast the EventData back to a LWTuple, validate that the result is not none, that its ID is the one they are expecting, and that any contents are as expected. They can then store any new data needed into the tuple by adding to the data array before returning from the listener. These listeners should typically use ELDImmediate as their deferral mode so that the results are immediately processed and passed back to the caller, although mods may advertise longer-lived tuples that can be processed with other deferral strategies. Note that since multiple mods can all be listening on the same event there may be multiple mods receiving the same tuple. If more than one mod needs to return data in a tuple that was not intended to receive data from more than one mod a conflict occurs and these mods may be incompatible. List of data types The kind of data stored in a XComLWTValue. Find the corresponding struct property names in XComLWTuple.uc (see Source code references ) enum XComLWTValueKind { XComLWTVBool, XComLWTVInt, XComLWTVFloat, XComLWTVString, XComLWTVName, XComLWTVObject, XComLWTVVector, XComLWTVRotator, XComLWTVTile, XComLWTVArrayObjects, XComLWTVArrayInts, XComLWTVArrayFloats, XComLWTVArrayStrings, XComLWTVArrayNames, XComLWTVArrayVectors, XComLWTVArrayRotators, XComLWTVArrayTiles }; Source code references XComLWTuple.uc:6-43 XComLWTuple.uc:47-73","title":"XComLWTuple"},{"location":"misc/XComLWTuple/#list-of-data-types","text":"The kind of data stored in a XComLWTValue. Find the corresponding struct property names in XComLWTuple.uc (see Source code references ) enum XComLWTValueKind { XComLWTVBool, XComLWTVInt, XComLWTVFloat, XComLWTVString, XComLWTVName, XComLWTVObject, XComLWTVVector, XComLWTVRotator, XComLWTVTile, XComLWTVArrayObjects, XComLWTVArrayInts, XComLWTVArrayFloats, XComLWTVArrayStrings, XComLWTVArrayNames, XComLWTVArrayVectors, XComLWTVArrayRotators, XComLWTVArrayTiles };","title":"List of data types"},{"location":"misc/XComLWTuple/#source-code-references","text":"XComLWTuple.uc:6-43 XComLWTuple.uc:47-73","title":"Source code references"},{"location":"strategy/NonIntegratedAlienRulerLocations/","text":"NonIntegratedAlienRulerLocations Tracking Issue: #771 Tags: Mods can force a specific ruler to be present on a specific mission using XComGameState_AlienRulerManager::AlienRulerLocations - the same mechanism that XPACK integration uses/introduces to make rulers wait in specific alien facilities. This could be done even without the CHL patch, but it wouldn't work if DLC is not run in the integrated mode. With this CHL patch, you can use that mechanism safely in both integrated and non-integrated mode. Note that when the non-integrated mode is enabled, the AlienRulerLocations array is not populated by the DLC Example usage: local XComGameState_AlienRulerManager RulerManager; local AlienRulerLocation RulerLocation; RulerLocation.RulerRef = RulerManager.GetAlienRulerReference('ViperKing'); RulerLocation.MissionRef = MissionRef; RulerLocation.bActivated = true; RulerLocation.bNeedsPopup = false; RulerManager.AlienRulerLocations.AddItem(RulerLocation); Source code references XComGameState_AlienRulerManager.uc:707-726","title":"NonIntegratedAlienRulerLocations"},{"location":"strategy/NonIntegratedAlienRulerLocations/#source-code-references","text":"XComGameState_AlienRulerManager.uc:707-726","title":"Source code references"},{"location":"strategy/OverrideNextRetaliationDisplay/","text":"OverrideNextRetaliationDisplay Tracking Issue: #667 Tags: The Dark Events Screen ( UIAdventOperations ) by default shows a string like: \"Next Retaliation: 6 Weeks (Estimated)\". This event allows mods to override whether to show that text, and customize the actual displayed text. EventID: OverrideNextRetaliationDisplay EventData: XComLWTuple { Data: [ inout bool bShow, inout string strHeader, inout string strValue, inout string strFooter ] } Source code references UIAdventOperations.uc:253-268","title":"OverrideNextRetaliationDisplay"},{"location":"strategy/OverrideNextRetaliationDisplay/#source-code-references","text":"UIAdventOperations.uc:253-268","title":"Source code references"},{"location":"tactical/OverrideUnitFocusUI/","text":"OverrideUnitFocusUI Tracking Issue: #257 Tags: compatibility This focus change allows mods to change the focus UI that the vanilla game uses to display Templar Focus. This effectively creates different types of Focus, even though the game does not know about this. For example, you can create a custom soldier class with its own type of focus, tracked with a UnitValue . This imposes a few limitations on the system: A given unit only ever has a single \"type\" of focus. The rules for different focus types are expected to be so different from one another to make any conflicts a painful experience for modders and players. In particular, it means that this function should NOT be used to make any changes to the Templar Focus, as tempting as it may be. This also includes an Effect of the name TemplarFocus or an Effect Class of the type XComGameState_Effect_TemplarFocus . In order to add your custom focus types, there are two changes in XComGame you can use: A new event hook for UIUnitFlag and UITacticalHUD_SoldierInfo : Documentation for that particular hook is directly below. A change in X2AbilityCost_Focus : You may subclass that particular class and override all functions declared there ( CanAfford , ApplyCost , PreviewFocusCost ). This can be used to preview a cost for custom skills that consume focus. Again, make sure to not mix and match custom subclasses with the base class for any abilities. EventID: OverrideUnitFocusUI EventData: XComLWTuple { Data: [ inout bool bVisible, inout int currentFocus, inout int maxFoxus, inout string color, inout string iconPath, inout string tooltipText, inout string focusLabel ] } Note that if bVisible == false , the rest will be ignored and will not have valid data in it. Compatibility If you override UIUnitFlag , your code may undo the HL's changes that support this feature in the UI. See the tracking issue for code samples. Source code references CHHelpers.uc:324-368","title":"OverrideUnitFocusUI"},{"location":"tactical/OverrideUnitFocusUI/#compatibility","text":"If you override UIUnitFlag , your code may undo the HL's changes that support this feature in the UI. See the tracking issue for code samples.","title":"Compatibility"},{"location":"tactical/OverrideUnitFocusUI/#source-code-references","text":"CHHelpers.uc:324-368","title":"Source code references"}]}